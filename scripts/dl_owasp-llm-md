#!/bin/bash -eu

SCRIPT_DIR=$(dirname "$0")

# This script downloads all .md files from an OWASP GitHub repository directory
# using the GitHub API and curl

# Define variables
REPO_OWNER="OWASP"
REPO_NAME="www-project-top-10-for-large-language-model-applications"
BRANCH="main"

# Ensure year is provided as a parameter
if [[ $# -lt 1 ]]; then
  # Default to 2025 if no argument is provided.
  echo "No year provided. Defaulting to 2025."
  YEAR=2025
else
  YEAR="$1"
fi

# Adjust directory based on year
if [[ "$YEAR" == "2024" ]]; then
  DIRECTORY="Archive/1_1_vulns"
elif [[ "$YEAR" == "2025" ]]; then
  DIRECTORY="2_0_vulns"
else
  echo "Unsupported year: $YEAR"
  exit 1
fi

OUTPUT_DIR="${SCRIPT_DIR}/../_refs-markdown/owasp-llm_$YEAR"

# Create output directory if it doesn't exist
mkdir -p "$OUTPUT_DIR"

# Get the file list using GitHub API
echo "Fetching file list from GitHub API for year $YEAR..."
FILE_LIST=$(curl -s "https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/contents/$DIRECTORY?ref=$BRANCH" |
            sed -n 's/.*"path": "\(.*\.md\)".*/\1/p')

# Download each markdown file
echo "Downloading markdown files..."
IFS=$'\n' # Set Internal Field Separator to handle special characters in file paths
echo "$FILE_LIST" | while read -r FILE_PATH; do
    # Extract the filename
    FILENAME=$(basename "$FILE_PATH")
    
    # Define the raw URL for the file
    RAW_URL="https://raw.githubusercontent.com/$REPO_OWNER/$REPO_NAME/$BRANCH/$FILE_PATH"
    
    # Download the file
    echo "Downloading $FILENAME..."
    curl -s "$RAW_URL" -o "$OUTPUT_DIR/$FILENAME"
    
    # Add a small delay to avoid rate limiting
    sleep 0.5
done

echo "Done! All .md files for year $YEAR have been downloaded to $OUTPUT_DIR/"